#!/usr/bin/env bash

if [[ "$1" == "help" ]] ; then
#    echo "   bh vm-build [N...]"
#    echo "          fetch code from host, compile and optionally deploy to robot(s)"
    exit
fi

# TODO don't couple this to remote name drew, host name drew, ssh target drew@bert, drew's config file

touch version.cc.in

# fetch multiple repos, hard-reset to remote version of current branch,
# and build on one core

git fetch --multiple bert bb \
 && git reset --hard bert/`git rev-parse --abbrev-ref HEAD` \
 && git submodule init \
 && git submodule update \
 && jsonlint -q *.json \
 && make -j 2 boldhumanoid

# if there was an error, propagate it
if [[ $? -ne 0 ]] ; then
  exit $?
fi

# if no target number provided, we're done
if [[ $# -eq 0 ]] ; then
  exit 0
fi

# strip the binary to reduce size for rsync
# if debug symbols needed, run "bh vm-build" with no arguments, then
# run "bh deploy-min N" for the robot you're targetting

echo "Stripping binary to reduce transfer size. If debug symbols are needed, don't pass any agent number(s) and use bh deploy-min"

strip boldhumanoid

# deploy to specified robot(s)

for i in ${@:1}
do
  echo "deploying to darwin$i.local" \
   && rsync -zrP boldhumanoid \
                 configuration-team.json \
                 configuration-hatfield.json \
                 configuration-drews.json \
                 configuration-berlin.json \
                 configuration-metadata.json \
                 darwin@darwin$i.local:

  if [[ $? -eq 0 ]] ; then
    ssh darwin@darwin$i.local 'espeak -p 0 -s 130 -v english-mb-en1 "Deployment complete"' 2> /dev/null &
  else
    echo FAILED to deploy to darwin$i.local
    res=1
  fi
done

# if all went well, log out some stats about what was built so it's
# easy to see when coming back to the vm later

if [[ $res -eq 0 ]] ; then
  git --no-pager log -10 --oneline --decorate \
   && date \
   && ssh -X drew@bert 'DISPLAY=:0 notify-send -i face-monkey "Ook ook ook" "Build monkey says..."'
fi

exit $res
