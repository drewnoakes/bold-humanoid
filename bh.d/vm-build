#!/usr/bin/env bash

if [[ "$1" == "help" ]] ; then
#    echo "   bh vm-build [N...]"
#    echo "          fetch code from host, compile and optionally deploy to robot(s)"
    exit
fi

# load common functions
if [ ! -f ${BOLD_HUMANOID_DIR}/bh.d/_functions ]; then
    echo "BOLD_HUMANOID_DIR" not set
    exit 1
fi
source ${BOLD_HUMANOID_DIR}/bh.d/_functions

# TODO don't couple this to remote name drew, host name drew, ssh target drew@bert, drew's config file

touch version.cc.in

# fetch multiple repos, hard-reset to remote version of current branch,
# and build on one core

git fetch --multiple bert                                     \
 && git reset --hard bert/`git rev-parse --abbrev-ref HEAD`   \
 && git submodule init                                        \
 && git submodule update                                      \
 && jsonlint -q *.json                                        \
 && touch Version/version.cc Version/version.cc.in            \
 && make -j 2 boldhumanoid                                    \
 && git --no-pager log -5 --oneline

# if there was an error, propagate it
if [[ $? -ne 0 ]] ; then
  ssh -X drew@bert 'DISPLAY=:0 notify-send -i face-sad "AAK AAK AAAK!!" "Build monkey says..."'
  exit 1
fi

# if no target number provided, we're done
if [[ $# -eq 0 ]] ; then
  exit 0
fi

# strip the binary to reduce size for rsync
# if debug symbols needed, run "bh vm-build" with no arguments, then
# run "bh deploy-min N" for the robot you're targeting

echo "Stripping binary to reduce transfer size. If debug symbols are needed, don't pass any agent number(s) and use bh deploy-min"

strip boldhumanoid

# deploy to specified robot(s)

remote_vm_deploy()
{
    rsync -zrP boldhumanoid                        \
               configuration-team.json             \
               configuration-hatfield.json         \
               configuration-drews.json            \
               configuration-metadata.json         \
               configuration-rohow2014.json        \
               darwin@darwin$1.local:

    if [ $? -eq 0 ]; then
        remote_say $1 "Deployment complete"
        report_result $1 0
    else
        report_result $1 1
    fi
}

export -f remote_vm_deploy

parallel -j0 remote_vm_deploy ::: ${@:1}

# if all went well, log out some stats about what was built so it's
# easy to see when coming back to the vm later

if [[ $res -eq 0 ]] ; then
  git --no-pager log -10 --oneline --decorate \
   && date \
   && ssh -X drew@bert 'DISPLAY=:0 notify-send -i face-monkey "Ook ook ook" "Build monkey says..."'
fi

exit $res
