=-=-=-=-= TODO =-=-=-=-=-=

- debuggable AmbulatorState
- choose foot to kick with

- localiser
  - intersection features
  - tweak for goalie
  - use ball as a landmark
  - variance of non-zero weighted
  - control/motion model

- roles
  - attack
  - support
  - penalty striker
  - penalty keeper

- communication between robots
  - ball position
  - ownership / disownership
    
- dark object/unlabelled-in-field/ufo avoidance

- RT show FPS, total and per-timing-item

- reuse Clock class in place of Debugger

- Control::createDouble

- send agent status to the game controller

- RT:
  - control data updated on each change, so when module re-added after a change, it shows it

=-=-=-=-= DONE =-=-=-=-=-=

- charge batteries
- battery system
- network/subnet configuration
- read rules before ref training
- team logo image
- get a team id
- localiser scoring: use 1/(x+1)
- localiser scoring: scale by dot product (angle)
- localiser smoothing (moving average)
- control to use only goals
- reduce noise (deg/cm)
- remove goal blob limitation
- don't inject particles if nothing seen
- localiser uses actual model of a circle
- clothing
- numbers
- attempt to segment the field for colour labelling
- don't require button press at startup
- don't require ready->set->play because we may be brought into play mid-game
- easier to see forehead colours for game states
- use button to unplenalise manually
- review ball/goal labelling
- localiser ctor params via config file
- integrate game state with options
- RT unload stops charts
- RT unload clears controls
- output dot file from fsm's
- goalie role
- Math::lerp
- use LEDs to communicate with human observers during competition

